# Generated by Django 3.1.5 on 2021-01-21 14:59

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import numpwdata.utils.encoders


class Migration(migrations.Migration):

    replaces = [('densities', '0001_initial'), ('densities', '0002_auto_20210114_0948'), ('densities', '0003_auto_20210114_1119'), ('densities', '0004_auto_20210114_1129'), ('densities', '0005_auto_20210114_1153')]

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('files', '0002_datfile'),
    ]

    operations = [
        migrations.CreateModel(
            name='Density',
            fields=[
                ('id', models.AutoField(help_text='Primary key for Base class.', primary_key=True, serialize=False)),
                ('last_modified', models.DateTimeField(auto_now=True, help_text='Date the class was last modified')),
                ('tag', models.CharField(blank=True, help_text='User defined tag for easy searches', max_length=200, null=True)),
                ('user', models.ForeignKey(blank=True, help_text='User who updated this object. Set on save by connection to database. Anonymous if not found.', null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Interaction',
            fields=[
                ('id', models.AutoField(help_text='Primary key for Base class.', primary_key=True, serialize=False)),
                ('last_modified', models.DateTimeField(auto_now=True, help_text='Date the class was last modified')),
                ('tag', models.CharField(blank=True, help_text='User defined tag for easy searches', max_length=200, null=True)),
                ('user', models.ForeignKey(blank=True, help_text='User who updated this object. Set on save by connection to database. Anonymous if not found.', null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Phenemenological',
            fields=[
                ('interaction_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='densities.interaction')),
                ('name', models.CharField(help_text='Name of the interaction.', max_length=200)),
                ('publication', models.TextField(blank=True, help_text='Publication associated with the interaction.', null=True)),
                ('em_potential', models.BooleanField(help_text='Interaction includes electromagnetic potential.')),
                ('three_nuc_force', models.CharField(help_text='Three-nucleon force used with interaction.', max_length=200)),
                ('misc', models.JSONField(encoder=numpwdata.utils.encoders.NympyEncoder, help_text='Miscellaneous information about the interaction.')),
            ],
            options={
                'unique_together': {('name', 'em_potential', 'three_nuc_force')},
            },
            bases=('densities.interaction',),
        ),
        migrations.CreateModel(
            name='Chiral',
            fields=[
                ('interaction_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='densities.interaction')),
                ('name', models.CharField(help_text='Name of the interaction.', max_length=200)),
                ('order', models.CharField(choices=[('LO', 'LO'), ('NLO', 'NLO'), ('N2LO', 'N2LO'), ('N3LO', 'N3LO'), ('N4LO', 'N4LO'), ('N4LO+', 'N4LO+')], help_text='Chiral order.', max_length=10)),
                ('regulator', models.CharField(help_text='Regulator used in computation. See comment for cutoff type.', max_length=200)),
                ('em_potential', models.BooleanField(help_text='Interaction includes electromagnetic potential.')),
                ('publication', models.TextField(blank=True, help_text='Publication associated with the interaction.', null=True)),
                ('misc', models.JSONField(blank=True, encoder=numpwdata.utils.encoders.NympyEncoder, help_text='Miscellaneous information about the interaction.', null=True)),
            ],
            options={
                'unique_together': {('name', 'order', 'regulator', 'em_potential')},
            },
            bases=('densities.interaction',),
        ),
        migrations.CreateModel(
            name='Density1N',
            fields=[
                ('density_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='densities.density')),
                ('nucleus', models.CharField(help_text='Name of the nucleus.', max_length=10)),
                ('n_nuc', models.PositiveIntegerField(help_text='Number of nucleons inside the nucleus.')),
                ('qval', models.DecimalField(decimal_places=5, help_text='Value of momentum transfer in inverse fermi.', max_digits=8)),
                ('thetaval', models.DecimalField(decimal_places=2, help_text='?', max_digits=5)),
                ('momentum_info', models.JSONField(blank=True, encoder=numpwdata.utils.encoders.NympyEncoder, help_text='Momentum mesh used for density representing the matrix.', null=True)),
                ('channel_info', models.JSONField(blank=True, encoder=numpwdata.utils.encoders.NympyEncoder, help_text='Information about quantum channels.', null=True)),
                ('mesh_info', models.JSONField(blank=True, encoder=numpwdata.utils.encoders.NympyEncoder, help_text='Internal mesh information used to obtain the density, e.g., in integrations.', null=True)),
                ('file', models.OneToOneField(help_text='File information about density.', on_delete=django.db.models.deletion.CASCADE, to='files.datfile')),
                ('interaction', models.ForeignKey(help_text='Interaction used to compute nucleus.', on_delete=django.db.models.deletion.CASCADE, to='densities.interaction')),
            ],
            options={
                'abstract': False,
            },
            bases=('densities.density',),
        ),
        migrations.CreateModel(
            name='Density2N',
            fields=[
                ('density_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='densities.density')),
                ('nucleus', models.CharField(help_text='Name of the nucleus.', max_length=10)),
                ('n_nuc', models.PositiveIntegerField(help_text='Number of nucleons inside the nucleus.')),
                ('qval', models.DecimalField(decimal_places=5, help_text='Value of momentum transfer in inverse fermi.', max_digits=8)),
                ('thetaval', models.DecimalField(decimal_places=2, help_text='?', max_digits=5)),
                ('momentum_info', models.JSONField(blank=True, encoder=numpwdata.utils.encoders.NympyEncoder, help_text='Momentum mesh used for density representing the matrix.', null=True)),
                ('channel_info', models.JSONField(blank=True, encoder=numpwdata.utils.encoders.NympyEncoder, help_text='Information about quantum channels.', null=True)),
                ('mesh_info', models.JSONField(blank=True, encoder=numpwdata.utils.encoders.NympyEncoder, help_text='Internal mesh information used to obtain the density', null=True)),
                ('file', models.OneToOneField(help_text='File information about density.', on_delete=django.db.models.deletion.CASCADE, to='files.h5file')),
                ('interaction', models.ForeignKey(help_text='Interaction used to compute nucleus.', on_delete=django.db.models.deletion.CASCADE, to='densities.interaction')),
            ],
            options={
                'abstract': False,
            },
            bases=('densities.density',),
        ),
    ]
